I 10.20/17:13 main.py:66  ] => PyTorch Version: 1.6.0
I 10.20/17:13 main.py:14  ] Running on CPU
I 10.20/17:14 crnet.py:118 ] reduction=4
I 10.20/17:14 main.py:25  ] pretrained model loaded from ../Experiments/checkpoints/in_04.pth
I 10.20/17:14 main.py:25  ] => Model Name: CRNet [pretrained: ../Experiments/checkpoints/in_04.pth]
I 10.20/17:14 main.py:25  ] => Model Config: compression ratio=1/4
I 10.20/17:14 main.py:25  ] => Model Flops: 5.386M
I 10.20/17:14 main.py:25  ] => Model Params Num: 2.103M

I 10.20/17:14 main.py:25  ] *****************************************************************
CRNet(
  (encoder1): Sequential(
    (conv3x3_bn): ConvBN(
      (conv): Conv2d(2, 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn): BatchNorm2d(2, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (relu1): LeakyReLU(negative_slope=0.3, inplace=True)
    (conv1x9_bn): ConvBN(
      (conv): Conv2d(2, 2, kernel_size=[1, 9], stride=(1, 1), padding=[0, 4], bias=False)
      (bn): BatchNorm2d(2, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (relu2): LeakyReLU(negative_slope=0.3, inplace=True)
    (conv9x1_bn): ConvBN(
      (conv): Conv2d(2, 2, kernel_size=[9, 1], stride=(1, 1), padding=[4, 0], bias=False)
      (bn): BatchNorm2d(2, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (encoder2): ConvBN(
    (conv): Conv2d(2, 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    (bn): BatchNorm2d(2, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (encoder_conv): Sequential(
    (relu1): LeakyReLU(negative_slope=0.3, inplace=True)
    (conv1x1_bn): ConvBN(
      (conv): Conv2d(4, 2, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(2, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (relu2): LeakyReLU(negative_slope=0.3, inplace=True)
  )
  (encoder_fc): Linear(in_features=2048, out_features=512, bias=True)
  (decoder_fc): Linear(in_features=512, out_features=2048, bias=True)
  (decoder_feature): Sequential(
    (conv5x5_bn): ConvBN(
      (conv): Conv2d(2, 2, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
      (bn): BatchNorm2d(2, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (relu): LeakyReLU(negative_slope=0.3, inplace=True)
    (CRBlock1): CRBlock(
      (path1): Sequential(
        (conv3x3): ConvBN(
          (conv): Conv2d(2, 7, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn): BatchNorm2d(7, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (relu1): LeakyReLU(negative_slope=0.3, inplace=True)
        (conv1x9): ConvBN(
          (conv): Conv2d(7, 7, kernel_size=[1, 9], stride=(1, 1), padding=[0, 4], bias=False)
          (bn): BatchNorm2d(7, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (relu2): LeakyReLU(negative_slope=0.3, inplace=True)
        (conv9x1): ConvBN(
          (conv): Conv2d(7, 7, kernel_size=[9, 1], stride=(1, 1), padding=[4, 0], bias=False)
          (bn): BatchNorm2d(7, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (path2): Sequential(
        (conv1x5): ConvBN(
          (conv): Conv2d(2, 7, kernel_size=[1, 5], stride=(1, 1), padding=[0, 2], bias=False)
          (bn): BatchNorm2d(7, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (relu): LeakyReLU(negative_slope=0.3, inplace=True)
        (conv5x1): ConvBN(
          (conv): Conv2d(7, 7, kernel_size=[5, 1], stride=(1, 1), padding=[2, 0], bias=False)
          (bn): BatchNorm2d(7, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (conv1x1): ConvBN(
        (conv): Conv2d(14, 2, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(2, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (identity): Identity()
      (relu): LeakyReLU(negative_slope=0.3, inplace=True)
    )
    (CRBlock2): CRBlock(
      (path1): Sequential(
        (conv3x3): ConvBN(
          (conv): Conv2d(2, 7, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn): BatchNorm2d(7, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (relu1): LeakyReLU(negative_slope=0.3, inplace=True)
        (conv1x9): ConvBN(
          (conv): Conv2d(7, 7, kernel_size=[1, 9], stride=(1, 1), padding=[0, 4], bias=False)
          (bn): BatchNorm2d(7, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (relu2): LeakyReLU(negative_slope=0.3, inplace=True)
        (conv9x1): ConvBN(
          (conv): Conv2d(7, 7, kernel_size=[9, 1], stride=(1, 1), padding=[4, 0], bias=False)
          (bn): BatchNorm2d(7, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (path2): Sequential(
        (conv1x5): ConvBN(
          (conv): Conv2d(2, 7, kernel_size=[1, 5], stride=(1, 1), padding=[0, 2], bias=False)
          (bn): BatchNorm2d(7, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (relu): LeakyReLU(negative_slope=0.3, inplace=True)
        (conv5x1): ConvBN(
          (conv): Conv2d(7, 7, kernel_size=[5, 1], stride=(1, 1), padding=[2, 0], bias=False)
          (bn): BatchNorm2d(7, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (conv1x1): ConvBN(
        (conv): Conv2d(14, 2, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(2, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (identity): Identity()
      (relu): LeakyReLU(negative_slope=0.3, inplace=True)
    )
  )
  (sigmoid): Sigmoid()
)
*****************************************************************

I 10.20/17:14 solver.py:230 ] [20/100] loss: 9.679e-07 | rho: 9.960e-01 | NMSE: -2.694e+01 | time: 0.045
I 10.20/17:14 solver.py:230 ] [40/100] loss: 9.612e-07 | rho: 9.960e-01 | NMSE: -2.694e+01 | time: 0.045
I 10.20/17:14 solver.py:230 ] [60/100] loss: 9.569e-07 | rho: 9.960e-01 | NMSE: -2.698e+01 | time: 0.045
I 10.20/17:14 solver.py:230 ] [80/100] loss: 9.568e-07 | rho: 9.961e-01 | NMSE: -2.697e+01 | time: 0.045
I 10.20/17:14 solver.py:230 ] [100/100] loss: 9.519e-07 | rho: 9.961e-01 | NMSE: -2.699e+01 | time: 0.045
I 10.20/17:14 solver.py:230 ] => Test rho:9.961e-01  NMSE: -2.699e+01


=> Test result: 
loss: 9.519e-07    rho: 9.961e-01    NMSE: -2.699e+01

